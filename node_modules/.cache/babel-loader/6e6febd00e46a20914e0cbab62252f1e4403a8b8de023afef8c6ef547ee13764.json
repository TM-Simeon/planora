{"ast":null,"code":"var _jsxFileName = \"/root/projects/planora/src/components/piechart.js\";\nimport React from 'react';\nimport { Doughnut } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DoughnutChart = () => {\n  const labels = ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'];\n  const data = {\n    labels,\n    datasets: [{\n      label: 'Votes',\n      data: [12, 19, 3, 5, 2, 7],\n      backgroundColor: ['red', 'blue', 'yellow', 'green', 'purple', 'orange']\n    }]\n  };\n  const options = {\n    plugins: {\n      datalabels: {\n        color: '#000',\n        formatter: (value, context) => {\n          const percentage = (value / total * 100).toFixed(1) + '%';\n          return `${value} (${percentage})`;\n        },\n        anchor: 'end',\n        align: 'end',\n        offset: 10,\n        font: {\n          weight: 'bold'\n        }\n      },\n      legend: {\n        display: false // Hide default\n      }\n    }\n  };\n\n  // Split into two columns\n  const midpoint = Math.ceil(labels.length / 2);\n  const col1 = labels.slice(0, midpoint);\n  const col2 = labels.slice(midpoint);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Doughnut, {\n      data: data,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        marginTop: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginRight: '40px'\n        },\n        children: col1.map((label, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            alignItems: 'center',\n            marginBottom: '6px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: '12px',\n              height: '12px',\n              backgroundColor: data.datasets[0].backgroundColor[i],\n              marginRight: '8px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: col2.map((label, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            alignItems: 'center',\n            marginBottom: '6px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: '12px',\n              height: '12px',\n              backgroundColor: data.datasets[0].backgroundColor[i + midpoint],\n              marginRight: '8px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 15\n          }, this)]\n        }, i + midpoint, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_c = DoughnutChart;\nexport default DoughnutChart;\nvar _c;\n$RefreshReg$(_c, \"DoughnutChart\");","map":{"version":3,"names":["React","Doughnut","jsxDEV","_jsxDEV","DoughnutChart","labels","data","datasets","label","backgroundColor","options","plugins","datalabels","color","formatter","value","context","percentage","total","toFixed","anchor","align","offset","font","weight","legend","display","midpoint","Math","ceil","length","col1","slice","col2","children","fileName","_jsxFileName","lineNumber","columnNumber","style","justifyContent","marginTop","marginRight","map","i","alignItems","marginBottom","width","height","_c","$RefreshReg$"],"sources":["/root/projects/planora/src/components/piechart.js"],"sourcesContent":["import React from 'react';\nimport { Doughnut } from 'react-chartjs-2';\n\nconst DoughnutChart = () => {\n  const labels = ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'];\n  const data = {\n    labels,\n    datasets: [\n      {\n        label: 'Votes',\n        data: [12, 19, 3, 5, 2, 7],\n        backgroundColor: ['red', 'blue', 'yellow', 'green', 'purple', 'orange'],\n      },\n    ],\n  };\n  \n\n  const options = {\n    plugins: {\n        datalabels: {\n            color: '#000',\n            formatter: (value, context) => {\n              const percentage = ((value / total) * 100).toFixed(1) + '%';\n              return `${value} (${percentage})`;\n            },\n            anchor: 'end',\n            align: 'end',\n            offset: 10,\n            font: {\n              weight: 'bold'\n            }\n          },\n      legend: {\n        display: false, // Hide default\n      },\n    },\n  };\n\n  // Split into two columns\n  const midpoint = Math.ceil(labels.length / 2);\n  const col1 = labels.slice(0, midpoint);\n  const col2 = labels.slice(midpoint);\n\n  return (\n    <div>\n      <Doughnut data={data} options={options} />\n      <div style={{ display: 'flex', justifyContent: 'center', marginTop: '20px' }}>\n        <div style={{ marginRight: '40px' }}>\n          {col1.map((label, i) => (\n            <div key={i} style={{ display: 'flex', alignItems: 'center', marginBottom: '6px' }}>\n              <div style={{\n                width: '12px',\n                height: '12px',\n                backgroundColor: data.datasets[0].backgroundColor[i],\n                marginRight: '8px'\n              }}></div>\n              <span>{label}</span>\n            </div>\n          ))}\n        </div>\n        <div>\n          {col2.map((label, i) => (\n            <div key={i + midpoint} style={{ display: 'flex', alignItems: 'center', marginBottom: '6px' }}>\n              <div style={{\n                width: '12px',\n                height: '12px',\n                backgroundColor: data.datasets[0].backgroundColor[i + midpoint],\n                marginRight: '8px'\n              }}></div>\n              <span>{label}</span>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DoughnutChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}